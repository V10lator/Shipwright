#-------------------------------------------------------------------------------
.SUFFIXES:
#-------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

TOPDIR ?= $(CURDIR)

include $(DEVKITPRO)/wut/share/wut_rules

#-------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
#-------------------------------------------------------------------------------
TARGET		:=	ultraship
BUILD		:=	build
SOURCES		:=	
DATA		:=	
INCLUDES	:=	\
		../ZAPDTR/ZAPDUtils \
		libultraship/Lib/Fast3D/U64 \
		libultraship/Lib/spdlog \
		libultraship/Lib/spdlog/include \
		libultraship

#-------------------------------------------------------------------------------
# source files
#-------------------------------------------------------------------------------
SOURCEFILES_C :=    \
		libultraship/mixer.c \
		libultraship/Lib/stb/stb_impl.c \
		libultraship/Lib/Fast3D/gx2_shader_gen.c \
		libultraship/Lib/Fast3D/gx2_shader_debug.c \
		libultraship/Lib/Fast3D/gfx_heap.c

SOURCEFILES_CPP :=	\
		libultraship/Blob.cpp \
		libultraship/Cvar.cpp \
		libultraship/Environment.cpp \
		libultraship/GameSettings.cpp \
		libultraship/luslog.cpp \
		libultraship/ModManager.cpp \
		libultraship/SDLAudioPlayer.cpp \
		libultraship/Factories/AnimationFactory.cpp \
		libultraship/Factories/ArrayFactory.cpp \
		libultraship/Factories/BlobFactory.cpp \
		libultraship/Factories/CutsceneFactory.cpp \
		libultraship/Factories/MtxFactory.cpp \
		libultraship/Factories/PathFactory.cpp \
		libultraship/Animation.cpp \
		libultraship/Factories/TextFactory.cpp \
		libultraship/Factories/TextureFactory.cpp \
		libultraship/Factories/VtxFactory.cpp \
		libultraship/Array.cpp \
		libultraship/ConfigFile.cpp \
		libultraship/Controller.cpp \
		libultraship/SohHooks.cpp \
		libultraship/Factories/CollisionHeaderFactory.cpp \
		libultraship/Factories/DisplayListFactory.cpp \
		libultraship/Factories/MaterialFactory.cpp \
		libultraship/Factories/PlayerAnimationFactory.cpp \
		libultraship/Factories/ResourceLoader.cpp \
		libultraship/Factories/SceneFactory.cpp \
		libultraship/Factories/SkeletonFactory.cpp \
		libultraship/Factories/SkeletonLimbFactory.cpp \
		libultraship/Lib/Fast3D/gfx_cc.cpp \
		libultraship/Lib/Fast3D/gfx_pc.cpp \
		libultraship/Lib/StrHash64.cpp \
		libultraship/Lib/tinyxml2/tinyxml2.cpp \
		libultraship/Archive.cpp \
		libultraship/CollisionHeader.cpp \
		libultraship/ControllerAttachment.cpp \
		libultraship/Cutscene.cpp \
		libultraship/DisplayList.cpp \
		libultraship/GlobalCtx2.cpp \
		libultraship/File.cpp \
		libultraship/Material.cpp \
		libultraship/Matrix.cpp \
		libultraship/MemoryPack.cpp \
		libultraship/Model.cpp \
		libultraship/Path.cpp \
		libultraship/PlayerAnimation.cpp \
		libultraship/Resource.cpp \
		libultraship/ResourceMgr.cpp \
		libultraship/RumblePack.cpp \
		libultraship/Scene.cpp \
		libultraship/Skeleton.cpp \
		libultraship/SkeletonLimb.cpp \
		libultraship/Text.cpp \
		libultraship/Texture.cpp \
		libultraship/TextureMod.cpp \
		libultraship/Utils.cpp \
		libultraship/Vertex.cpp \
		libultraship/Window.cpp \
		libultraship/WindowShim.cpp \
		libultraship/stox.cpp \
		libultraship/WiiUController.cpp \
		libultraship/Lib/Fast3D/gfx_wiiu.cpp \
		libultraship/Lib/Fast3D/gfx_gx2.cpp

#-------------------------------------------------------------------------------
# options for code generation
#-------------------------------------------------------------------------------
CFLAGS	:=	-O2 -ffunction-sections \
		$(MACHDEP)

CFLAGS	+=	$(INCLUDE) -D__WIIU__ -D__WUT__ -DBIGENDIAN \
		-DNO_SOH_CONSOLE \
		-DSPDLOG_NO_THREAD_ID -DSPDLOG_NO_TLS \
		-DSTBI_NO_THREAD_LOCALS

CXXFLAGS	:= $(CFLAGS) -std=gnu++20
CFLAGS  +=  -std=gnu11

ASFLAGS	:=	$(ARCH)
LDFLAGS	=	$(ARCH) $(RPXSPECS) -Wl,-Map,$(notdir $*.map)

LIBS	:= 

#-------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level
# containing include and lib
#-------------------------------------------------------------------------------
LIBDIRS	:= $(PORTLIBS) $(WUT_ROOT)


#-------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#-------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#-------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/lib/lib$(TARGET).a
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir)) \
			$(foreach sf,$(SOURCEFILES_C),$(CURDIR)/$(dir $(sf))) \
			$(foreach sf,$(SOURCEFILES_CPP),$(CURDIR)/$(dir $(sf)))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c))) \
			$(foreach f,$(SOURCEFILES_C),$(notdir $(f)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp))) \
			$(foreach f,$(SOURCEFILES_CPP),$(notdir $(f)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#-------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#-------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#-------------------------------------------------------------------------------
	export LD	:=	$(CC)
#-------------------------------------------------------------------------------
else
#-------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#-------------------------------------------------------------------------------
endif
#-------------------------------------------------------------------------------

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))
export OFILES_SRC	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)
export OFILES 	:=	$(OFILES_BIN) $(OFILES_SRC)
export HFILES_BIN	:=	$(addsuffix .h,$(subst .,_,$(BINFILES)))

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

.PHONY: $(BUILD) clean all

#-------------------------------------------------------------------------------
all: $(BUILD)

lib:
	@[ -d $@ ] || mkdir -p $@

$(BUILD) : lib
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.wiiu

#-------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -rf build lib

#-------------------------------------------------------------------------------
else
.PHONY:	all

DEPENDS	:=	$(OFILES:.o=.d)

#-------------------------------------------------------------------------------
# main targets
#-------------------------------------------------------------------------------

$(OUTPUT)	:	$(OFILES)

$(OFILES_SRC)	: $(HFILES)
$(OFILES_SRC)	: $(HFILES_BIN)

#-------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#-------------------------------------------------------------------------------
%.bin.o	%_bin.h :	%.bin
#-------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPENDS)

#-------------------------------------------------------------------------------
endif
#-------------------------------------------------------------------------------
